version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: enrichstory
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: devpassword123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  backend:
    build:
      context: .
      dockerfile: Dockerfile.ultra-fast
    environment:
      - DATABASE_URL=postgresql://postgres:devpassword123@postgres:5432/enrichstory
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=dev-secret-key-local-only
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-sk_test_your_stripe_key_here}
      - BRAVE_API_KEY=${BRAVE_API_KEY:-your_brave_api_key_here}
      - FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY:-your_firecrawl_api_key_here}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your_openai_api_key_here}
    dns:
      - 8.8.8.8
      - 1.1.1.1
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./api:/app/api
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost/api
      - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_dummy
    volumes:
      - ./frontend/.next/static:/app/.next/static
      - ./frontend/public:/app/public
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
    ports:
      - "80:80"
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy

volumes:
  postgres_data: